s2mpj.m: the SIF decoder

s2mpjlib: the s2mpj libraries for matlab, python and julia

fullproblist : the list of problems to test, with their arguments calibrated for testing

redim.m : takes the official SIF problems listed in fullproblist from ~/problems/sif,
          modify them to have the same arguments as those specified in fullproblist and
          writes the modified SIF files in ./sif
          
regenerate.m : takes the modified SIF problems from ./sif and decodes them to .m, .py
         and .jl problem files, writing them in ./matlab_problems, ./python_problems
         or ./julia_problems respectively.
         
update_docker.m : copies the modified SIF files and the python programs and problem files
         to the docker

test_julia.jl : tests the .jl problem files specified in fullproblist   -> test_julia.data, test_julia.times

test_python.py : tests the .py problem files specified in fullproblist  -> test_python.data, test_python.times

test_matlab.m: tests the .m problem files specified in fullproblist     -> test_matlab.data, test_matlab.times

test_fortran.py: tests the SIF problem files specified in fullproblist
                 (through pycutest: must be run in the docker)          -> test_fortran.data

getfixed.m: gets the list of fixed variable for each problem -> fixed.lst (needed for running compare_res)

compare_res.m: compares the test_*.res files

mysif.m: to either 'build' the private list of SIF files in problems/mysif from the "official" problems/sif
         or 'check' if private and official files differ

oldnew.m : test timings for the use of custom vs native dictionnaries

oldnew.res: results of olnew.m

build_problems: builds the all_*_problems.tar.gz files and the list_of_*_problems files


update_github: updates either the s2mpj or the s2mpj_private versions of S2MPJ from s2mpj_work


Full testing procedure

1) check all SIF files in problems/mysif are ok (using mysif)
2) regenerate all .m, .py and .jl problems files (using regenerate and options.keepcorder = 1)
3) run the tests
    test_matlab.m  -> test_matlab.res
    test_python.py -> test_python.res
    test_julia.jl  -> test_julia.res
   If results_* files (containing timings) are desired, run the test
   with  redirection to the relevant results_* file.
4) open the pycutest docker and update the docker files (using update_docker)
5) run test_fortran.py in the docker -> test_fortran.res
6) cp test_fortran.res from the docker to .
7) run getfixed.m -> fixed.lst  (can be dobne in parallel with the tests)
8) compare the test_*.res files (using compare_res)
